<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!-- This is advice class configuration. This class is provided by Spring people 
Bcz this is common cross cutting logic that every one has to write 
Begin the transaction and comiting the transaction and rollbacking the transaction
 -->		
<tx:advice id="txAdvice" transaction-manager="transactionManager">
  <tx:attributes>
    <tx:method name="postJob" read-only="false"  rollback-for="com.declarative.exception.JobNotCreatedException"  />
    <!-- 
    This tag will make aop applicable to the methods which are starting with
    post and rest is anything
     <tx:method name="post*" read-only="false"/>
    
     This tag will make aop will not applicable to methods i.e * appart from starting with post
     both the tags we need to write
     <tx:method name="*" read-only="true"/>
     
     rollback-for="com.declarative.exception.JobNotCreatedException" 
     this attribute is used to configure multiple Checked exceptions.Bcz incase of checked exceptions spring provided Transaction Advice class i.e
     around and afterThrowing advice will not perform rollback operation for checked exception by default.we have to explicitly configurer this details using
     Transaction Attributes and we have to provide the fully qulified name also
     
     isolation="DEFAULT"
     In order to avoid the Dirty Read and Repeted Read and Panthom Read we have to specify the isolation levels 
     Implementation depends up on the type of the database we are using 
     incase of mysql it will provide only three levels of isolation
     incase of oracle it wil provide four levels of isolation 
     -->
     
  </tx:attributes>
</tx:advice>

<!-- This is aop configuration tags inside this we are writing pointcut means to which method we are adviceing this aspect  -->
<aop:config>
  <aop:pointcut expression="target(com.declarative.service.JobService)" id="jobservicePointCut"/>
  
  <!-- Unlike in aspect j configuration approach here we are writing this advisor tag 
  this configration approach is for Spring AOP -->
  <aop:advisor advice-ref="txAdvice" pointcut-ref="jobservicePointCut"/>
</aop:config>
</beans>
